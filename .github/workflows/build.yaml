name: Download and Build ANGLE

on:
  push:
    branches: [main]
    tags:
      - '*'

  pull_request:
    branches: [main]

  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
            target_cpu: "x64"
          - platform: linux/arm64  
            arch: arm64
            target_cpu: "arm64"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Depot Tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: Download ANGLE
        run: |
          mkdir -pv angle
          cd angle
          fetch angle
          git checkout $(cat ../commit)
          gclient sync

      - name: Build ANGLE
        run: |
          cd angle

          # config
          gn gen ../out/Release --args=" \
            is_debug=false \
            angle_enable_vulkan=true \
            angle_enable_swiftshader=true \
            angle_enable_gl=false \
            angle_enable_gl_desktop_backend=false \
            angle_enable_wgpu=false \
            angle_enable_null=false \
            angle_use_x11=false \
            angle_has_histograms=false \
            angle_build_tests=false"

          # use SwiftShader default
          sed -i -e 's/return angle::vk::ICD::Default;/return angle::vk::ICD::SwiftShader;/g' src/libANGLE/renderer/vulkan/DisplayVk.cpp

          # build
          ninja -C ../out/Release libEGL libGLESv2 libvulkan swiftshader_libvulkan

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        id: upload-artifacts
        with:
          name: angle-libraries-${{ matrix.arch }}-${{ github.run_number }}
          path: |
            out/Release/libEGL.so
            out/Release/libGLESv2.so
            out/Release/libvk_swiftshader.so
            out/Release/libvulkan.so.1
            out/Release/vk_swiftshader_icd.json
          retention-days: 30
          compression-level: 6

      - name: Output artifact info
        run: |
          echo "Architecture: ${{ matrix.arch }}"
          echo "Artifact ID: ${{ steps.upload-artifacts.outputs.artifact-id }}"
          echo "Artifact URL: ${{ steps.upload-artifacts.outputs.artifact-url }}"

      - name: Create release archive
        if: github.event_name == 'release'
        run: |
          # Read commit hash and get first 8 characters
          COMMIT_HASH=$(cat commit | head -c 8)
          echo "Using commit hash: $COMMIT_HASH"
          
          mkdir -p release-files
          cp out/Release/libEGL.so release-files/ 2>/dev/null || true
          cp out/Release/libGLESv2.so release-files/ 2>/dev/null || true
          cp out/Release/libvk_swiftshader.so release-files/ 2>/dev/null || true
          cp out/Release/libvulkan.so.1 release-files/ 2>/dev/null || true
          cp out/Release/vk_swiftshader_icd.json release-files/ 2>/dev/null || true
          cd release-files
          zip -r ../libangle-${{ matrix.arch }}-${COMMIT_HASH}.zip .
          cd ..
          ls -la libangle-${{ matrix.arch }}-${COMMIT_HASH}.zip
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: libangle-${{ matrix.arch }}-${{ env.COMMIT_HASH }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}
