name: Angle

env:
  ANGLE_VERSION: "a6ee4641d07e3f65cf54aa01c4707151db7a506b"

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/angle.yaml"
    tags:
      - "*"

  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/angle.yaml"

  workflow_dispatch:
    inputs:
      commit:
        description: "ANGLE commit hash to build"
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
            target_cpu: "x64"
            os: ubuntu-latest
          - platform: linux/arm64
            arch: arm64
            target_cpu: "arm64"
            os: ubuntu-latest
          - platform: darwin/arm64
            arch: osx-arm64
            target_cpu: "arm64"
            os: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Depot Tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: Download
        run: |
          mkdir -pv angle
          cd angle
          fetch angle
          git checkout ${{ inputs.commit || env.ANGLE_VERSION }}
          gclient sync

      - name: Build
        run: |
          cd angle

          # config
          gn gen ../out/Release --args=" \
            is_debug=false \
            angle_enable_vulkan=true \
            angle_enable_swiftshader=true \
            angle_enable_gl=false \
            angle_enable_gl_desktop_backend=false \
            angle_enable_wgpu=false \
            angle_enable_null=false \
            angle_use_x11=false \
            angle_has_histograms=false \
            angle_build_tests=false"

          # use SwiftShader default
          sed -i -e 's/return angle::vk::ICD::Default;/return angle::vk::ICD::SwiftShader;/g' src/libANGLE/renderer/vulkan/DisplayVk.cpp

          # build
          ninja -C ../out/Release libEGL libGLESv2 libvulkan swiftshader_libvulkan

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        id: upload-artifacts
        with:
          name: angle-libraries-${{ matrix.arch }}-${{ github.run_number }}
          path: |
            out/Release
          retention-days: 30
          compression-level: 6

      - name: Artifact info
        run: |
          echo "Architecture: ${{ matrix.arch }}"
          echo "Artifact ID: ${{ steps.upload-artifacts.outputs.artifact-id }}"
          echo "Artifact URL: ${{ steps.upload-artifacts.outputs.artifact-url }}"

      - name: Create release archive
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Get commit hash from input parameter and take first 8 characters
          COMMIT_HASH=$(echo "${{ inputs.commit || env.ANGLE_VERSION }}" | head -c 8)
          echo "Using commit hash: $COMMIT_HASH"

          cp -a out/Release release-files
          cd release-files
          zip -r ../libangle-${{ matrix.arch }}-${COMMIT_HASH}.zip .
          cd ..
          ls -la libangle-${{ matrix.arch }}-${COMMIT_HASH}.zip
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Upload to release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          files: libangle-${{ matrix.arch }}-${{ env.COMMIT_HASH }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}
